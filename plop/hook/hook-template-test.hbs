import { renderHook, act } from '@testing-library/react';

import { use{{name}} } from './use{{name}}.hook';

describe('Hook use{{name}}', () => {
    // beforeAll(() => {
    //     jest.useFakeTimers();
    //     jest.spyOn(global, 'setTimeout');
    // });
    // afterAll(() => {
    //     jest.useRealTimers();
    //     jest.clearAllTimers();
    // });
    it('Should ', async () => {
        // const { result, rerender } = await renderHook(
        //     (initialProps) => use{{name}}(initialProps),
        //     { initialProps: { myValue: 1 } }
        // );

        // expect(result.current.value).toBe(1);

        // rerender({ myValue: 2 });
        // expect(result.current.value).toBe(2);

        // await act(async () => {
        //     result.current.setValue(3);
        // });

        // expect(result.current.value).toBe(3);

        
        // const spy = jest
        //     .spyOn({{name}}Service, {{name}}Service.test.name as keyof typeof {{name}}Service);
        //     .mockReturnValue(123);
        // expect(spy).toBeCalledTimes(1);

        // const mocked{{name}}Service = jest.mocked({{name}}Service);
        // mocked{{name}}Service.test.mockReturnValue(456);
    })
})
