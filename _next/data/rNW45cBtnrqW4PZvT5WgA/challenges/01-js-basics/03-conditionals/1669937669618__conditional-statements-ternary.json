{"pageProps":{"title":"Challenge - Conditional Statements: Ternary","challenge":{"id":"1669937669618","isDone":false,"isCorrect":false,"title":"Conditional Statements: Ternary","description":"In the code below, you have a function called \"isPositive\". This function should take a single argument, \"num\", and return true if the value of \"num\" is positive (greater than 0), and false if the value of \"num\" is non-positive (less than or equal to 0).\n\nTo complete this challenge, fill in the blanks with the correct ternary operator using the \"?\" and \":\" symbols.","code":"function isPositive(num) {\n    // Fill in the blanks to complete the function\n[---editable---    return num > 0 ___ true ___ false;---editable---]\n}[---hidden---return isPositive;---hidden---]","testsCode":"test.describe('Conditional Statements: Ternary', () => {\n    let number =  Math.floor(Math.random() * 100) + 1;\n    test.it(`${number} is positive, so return true`, () => {\n        const response = __challengeFunction(number);\n        test.expect(response).toBe(true);\n    });\n    number =  Math.floor(Math.random() * 100) + 1;\n    test.it(`${-number} is negative, so return false`, () => {\n        const response = __challengeFunction(-number);\n        test.expect(response).toBe(false);\n    });\n});","answer":"function isPositive(num) {\n    // Fill in the blanks to complete the function\n    return num > 0 ? true : false;}"},"previousChallenge":{"id":"1669937360225","isDone":false,"isCorrect":false,"title":"Conditional Statements: Switch","description":"In the code below, you have a function called \"getCategory\". This function should take a single argument, \"num\", and return a string that represents the category that \"num\" belongs to. If \"num\" is positive, the function should return \"positive\". If \"num\" is negative, the function should return \"negative\". If \"num\" is zero, the function should return \"zero\".\n\nTo complete this challenge, fill in the blanks with the correct switch statement using the case and default keywords.","code":"function getCategory(num) {\n  // Fill in the blanks to complete the function\n[---editable---  __ (true) {---editable---]\n    case num > 0:\n      return \"positive\";\n    case num < 0:\n      return \"negative\";[---editable---    __:---editable---]\n      return \"zero\";\n  }\n}\n[---hidden--- return getCategory ---hidden---]","testsCode":"test.describe('Conditional Statements: Switch', () => {\n    let number = Math.floor(Math.random() * 100) + 1;\n    test.it(`${number} must return \"positive\"`, () => {\n        const response = __challengeFunction(number);\n        test.expect(response).toBe(\"positive\");\n    });\n    number = Math.floor(Math.random() * 100) + 1;\n    test.it(`${-number} must return \"negative\"`, () => {\n        const response = __challengeFunction(-number);\n        test.expect(response).toBe(\"negative\");\n    });\n    test.it(`0 must return \"zero\"`, () => {\n        const response = __challengeFunction(0);\n        test.expect(response).toBe(\"zero\");\n    });\n});","answer":"function getCategory(num) {\n  // Fill in the blanks to complete the function\n  switch (true) {    case num > 0:\n      return \"positive\";\n    case num < 0:\n      return \"negative\";    default:      return \"zero\";\n  }\n}\n"},"nextChallenge":null},"__N_SSG":true}