{"pageProps":{"title":"Challenge - Comparison Operators: Greater than and Less than","challenge":{"id":"1669834556322","isDone":false,"isCorrect":false,"title":"Comparison Operators: Greater than and Less than","description":"In the code below we have two variables (\"a\" and \"b\").\n\nFill in the spaces indicated with the required operations.","code":"let a, b;\n[---hidden---\nfunction challenge(a, b){\n---hidden---]\n[---editable---\n// Greater Than\nconst greaterThan = \n\n// Greater Than or Equal\nconst greaterThanEqual = \n\n// Less Than\nconst lessThan = \n\n// Less Than or Equal\nconst lessThanEqual = \n---editable---]\n\n[---hidden---\nreturn {greaterThan,greaterThanEqual,lessThan, lessThanEqual};\n}\nreturn challenge\n---hidden---]","testsCode":"test.describe('Greater than', () => {\n    let a = Math.floor(Math.random() * 50) + 51;\n    let b = Math.floor(Math.random() * 50) + 1;\n    test.it(`a (${a}) must be greater than b (${b})`, () => {\n        const {greaterThan} = __challengeFunction(a, b);\n        test.expect(greaterThan).toBe(true);\n    });\n    a = Math.floor(Math.random() * 50) + 51;\n    b = Math.floor(Math.random() * 50) + 1;\n    test.it(`a (${a}) must be greater than b (${b})`, () => {\n        const {greaterThan} = __challengeFunction(a, b);\n        test.expect(greaterThan).toBe(true);\n    });\n});\ntest.describe('Greater than or equal', () => {\n    let a = Math.floor(Math.random() * 50) + 51;\n    let b = Math.floor(Math.random() * 50) + 1;\n    test.it(`a (${a}) must be greater than b (${b})`, () => {\n        const {greaterThanEqual} = __challengeFunction(a, b);\n        test.expect(greaterThanEqual).toBe(true);\n    });\n    test.it(`a (${a}) and b (${a}) must be equal`, () => {\n        const {greaterThanEqual} = __challengeFunction(a, a);\n        test.expect(greaterThanEqual).toBe(true);\n    });\n});\ntest.describe('Less than', () => {\n    let a = Math.floor(Math.random() * 50) + 1;\n    let b = Math.floor(Math.random() * 50) + 51;\n    test.it(`a (${a}) must be less than b (${b})`, () => {\n        const {lessThan} = __challengeFunction(a, b);\n        test.expect(lessThan).toBe(true);\n    });\n    a = Math.floor(Math.random() * 50) + 1;\n    b = Math.floor(Math.random() * 50) + 51;\n    test.it(`a (${a}) must be greater than b (${b})`, () => {\n        const {lessThan} = __challengeFunction(a, b);\n        test.expect(lessThan).toBe(true);\n    });\n});\ntest.describe('Less than or equal', () => {\n    let a = Math.floor(Math.random() * 50) + 1;\n    let b = Math.floor(Math.random() * 50) + 51;\n    test.it(`a (${a}) must be less than b (${b})`, () => {\n        const {lessThanEqual} = __challengeFunction(a, b);\n        test.expect(lessThanEqual).toBe(true);\n    });\n    test.it(`a (${a}) and b (${a}) must be equal`, () => {\n        const {lessThanEqual} = __challengeFunction(a, a);\n        test.expect(lessThanEqual).toBe(true);\n    });\n});","answer":"let a, b;\n// Greater Than\nconst greaterThan = a > b;\n\n// Greater Than or Equal\nconst greaterThanEqual = a >= b;\n\n// Less Than\nconst lessThan = a < b;\n\n// Less Than or Equal\nconst lessThanEqual = a <= b;\n\n","chosen":false},"previousChallenge":{"id":"1669549201680","isDone":false,"isCorrect":false,"title":"Comparison Operators: Equal and Not Equal","description":"In the code below we have two variables (\"a\" and \"b\").\n\nFill in the spaces indicated with the operations of Equal and Not Equal.","code":"let a, b;\n[---hidden---\nfunction equal(a, b){\n---hidden---]\n[---editable---\n// Equal\nconst isEqual = \n---editable---]\n[---hidden---\nreturn isEqual;\n}\n---hidden---]\n\n[---hidden---\nfunction notEqual(a, b){\n\n---hidden---]\n[---editable---\n// Not Equal\nconst isNotEqual =\n---editable---]\n[---hidden---\nreturn isNotEqual;\n}\n\nreturn {equal, notEqual}\n---hidden---]\n\n","testsCode":"test.describe('Equal', () => {\n    test.it(`\"a\" and \"b\" must be equal`, () => {\n        const {equal} = __challengeFunction;\n        let n1 = Math.ceil(Math.random() * 100) + 1;\n        test.expect(equal(n1, n1)).toBe(true);\n        n1 = Math.ceil(Math.random() * 100) + 1;\n        test.expect(equal(n1, n1)).toBe(true);\n        n1 = Math.ceil(Math.random() * 100) + 1;\n        test.expect(equal(n1, n1)).toBe(true);\n    });\n});\ntest.describe('Not Equal', () => {\n    test.it(`\"a\" and \"b\" must be different`, () => {\n        const {notEqual} = __challengeFunction;\n        let n1 = Math.ceil(Math.random() * 100) + 1;\n        test.expect(notEqual(n1, n1)).toBe(false);\n        n1 = Math.ceil(Math.random() * 100) + 1;\n        test.expect(notEqual(n1, n1)).toBe(false);\n        n1 = Math.ceil(Math.random() * 100) + 1;\n        test.expect(notEqual(n1, n1)).toBe(false);\n    });\n});","answer":"let a, b;\n// Equal\nconst isEqual = a === b;\n\n// Not Equal\nconst isNotEqual = a !== b;\n\n","chosen":false},"nextChallenge":{"id":"1669547536580","isDone":false,"isCorrect":false,"title":"Arithmetic Operators - Addition, Subtraction, Multiplication and Division","description":"In the code below we have two variables (\"a\" and \"b\").\n\nFill in the spaces indicated with the operations of Addition, Subtraction, Multiplication and Division.","code":"let a, b;\n[---hidden---\nfunction addition(a, b){\n---hidden---]\n[---editable---\n// Addition\nconst additionResult =\n---editable---]\n[---hidden---\nreturn additionResult;}\n---hidden---]\n\n[---hidden---\nfunction subtraction(a, b){\n\n---hidden---]\n[---editable---\n// Subtraction\nconst subtractionResult = \n---editable---]\n[---hidden---\nreturn subtractionResult;}\n---hidden---]\n\n[---hidden---\nfunction multiplication(a, b){\n---hidden---]\n[---editable---\n// Multiplication\nconst multiplicationResult =\n---editable---]\n[---hidden---\nreturn multiplicationResult;}\n---hidden---]\n\n[---hidden---\nfunction division(a, b){\n---hidden---]\n[---editable---\n// Division\nconst multiplicationResult = \n---editable---]\n[---hidden---\nreturn multiplicationResult;}\nreturn {addition, subtraction, multiplication, division}\n---hidden---]","testsCode":"test.describe('Addition', () => {\n    let n1 = Math.floor(Math.random() * 100) + 1;\n    let n2 = Math.floor(Math.random() * 100) + 1;\n    test.it(`${n1} + ${n2} = ${n1+n2}`, () => {\n        const { addition } = __challengeFunction;\n        test.expect(addition(n1, n2)).toBe(n1 + n2);\n    });\n    n1 = Math.floor(Math.random() * 100) + 1;\n    n2 = Math.floor(Math.random() * 100) + 1;\n    test.it(`${n1} + ${n2} = ${n1+n2}`, () => {\n        const { addition } = __challengeFunction;\n        test.expect(addition(n1, n2)).toBe(n1 + n2);\n    });\n    n1 = Math.floor(Math.random() * 100) + 1;\n    n2 = Math.floor(Math.random() * 100) + 1;\n    test.it(`${n1} + ${n2} = ${n1+n2}`, () => {\n        const { addition } = __challengeFunction;\n        test.expect(addition(n1, n2)).toBe(n1 + n2);\n    });\n});\ntest.describe('Subtraction', () => {\n    let n1 = Math.floor(Math.random() * 100) + 1;\n    let n2 = Math.floor(Math.random() * 100) + 1;\n    test.it(`${n1} - ${n2} = ${n1-n2}`, () => {\n        const { subtraction } = __challengeFunction;\n        test.expect(subtraction(n1, n2)).toBe(n1 - n2);\n    });\n    n1 = Math.floor(Math.random() * 100) + 1;\n    n2 = Math.floor(Math.random() * 100) + 1;\n    test.it(`${n1} - ${n2} = ${n1-n2}`, () => {\n        const { subtraction } = __challengeFunction;\n        test.expect(subtraction(n1, n2)).toBe(n1 - n2);\n    });\n    n1 = Math.floor(Math.random() * 100) + 1;\n    n2 = Math.floor(Math.random() * 100) + 1;\n    test.it(`${n1} - ${n2} = ${n1-n2}`, () => {\n        const { subtraction } = __challengeFunction;\n        test.expect(subtraction(n1, n2)).toBe(n1 - n2);\n    });\n});\ntest.describe('Multiplication', () => {\n    let n1 = Math.floor(Math.random() * 100) + 1;\n    let n2 = Math.floor(Math.random() * 100) + 1;\n    test.it(`${n1} * ${n2} = ${n1*n2}`, () => {\n        const { multiplication } = __challengeFunction;\n        test.expect(multiplication(n1, n2)).toBe(n1 * n2);\n    });\n    n1 = Math.floor(Math.random() * 100) + 1;\n    n2 = Math.floor(Math.random() * 100) + 1;\n    test.it(`${n1} * ${n2} = ${n1*n2}`, () => {\n        const { multiplication } = __challengeFunction;\n        test.expect(multiplication(n1, n2)).toBe(n1 * n2);\n    });\n    n1 = Math.floor(Math.random() * 100) + 1;\n    n2 = Math.floor(Math.random() * 100) + 1;\n    test.it(`${n1} * ${n2} = ${n1*n2}`, () => {\n        const { multiplication } = __challengeFunction;\n        test.expect(multiplication(n1, n2)).toBe(n1 * n2);\n    });\n});\ntest.describe('Division', () => {\n    let n1 = Math.floor(Math.random() * 100) + 1;\n    let n2 = Math.floor(Math.random() * 100) + 1;\n    test.it(`${n1} / ${n2} = ${n1/n2}`, () => {\n        const { division } = __challengeFunction;\n        test.expect(division(n1, n2)).toBe(n1 / n2);\n    });\n    n1 = Math.floor(Math.random() * 100) + 1;\n    n2 = Math.floor(Math.random() * 100) + 1;\n    test.it(`${n1} / ${n2} = ${n1/n2}`, () => {\n        const { division } = __challengeFunction;\n        test.expect(division(n1, n2)).toBe(n1 / n2);\n    });\n    n1 = Math.floor(Math.random() * 100) + 1;\n    n2 = Math.floor(Math.random() * 100) + 1;\n    test.it(`${n1} / ${n2} = ${n1/n2}`, () => {\n        const { division } = __challengeFunction;\n        test.expect(division(n1, n2)).toBe(n1 / n2);\n    });\n});","answer":"let a, b;\n// Addition\nconst additionResult = a + b;\n\n// Subtraction\nconst subtractionResult = a - b;\n\n// Multiplication\nconst multiplicationResult = a * b;\n\n// Division\nconst multiplicationResult = a / b;\n","chosen":false}},"__N_SSG":true}