[
    {
        "id": "1671645322722",
        "isDone": false,
        "isCorrect": false,
        "title": "Get Property",
        "description": "Create a function called getProperty that takes in an object and a property name. Return the value of the property. If the object doesn't have the property, the function should return null.",
        "code": "function getProperty(obj, propName) {[---editable---\n  \n  \n  ---editable---]\n}[---hidden--- return getProperty; ---hidden---]",
        "testsCode": "test.describe('Get Property', () => {\n  test.it('should return the value of the property age - { name: \"John\", age: 30 }', () => {\n    const response = __challengeFunction({ name: 'John', age: 30 }, 'age');\n    test.expect(response).toBe(30);\n  });\n  test.it('should return null if the object does not have the property height - { name: \"John\", age: 30 }', () => {\n    const response = __challengeFunction({ name: 'John', age: 30 }, 'height');\n    test.expect(response).toBe(null);\n  });\n});",
        "answer": "function getProperty(obj, propName) {    return obj.hasOwnProperty(propName) ? obj[propName] : null;  }"
    },
    {
        "id": "1671645712624",
        "isDone": false,
        "isCorrect": false,
        "title": "Count Properties ",
        "description": "Create a function called countProperties that takes in an object. Return the number of properties the object has.",
        "code": "function countProperties(obj) {[---editable---\n  \n  \n---editable---]\n}[---hidden--- return countProperties; ---hidden---]",
        "testsCode": "test.describe('Count Properties', () => {\n  test.it('should return the number of properties in the object - { name: \"John\", age: 30, height: 180 }', () => {\n    const response = __challengeFunction({ name: 'John', age: 30, height: 180 });\n    test.expect(response).toBe(3);\n  });\n  test.it('should return 0 if the object is empty - {}', () => {\n    const response = __challengeFunction({});\n    test.expect(response).toBe(0);\n  });\n});",
        "answer": "function countProperties(obj) {  return Object.keys(obj).length;}"
    },
    {
        "id": "1671645910706",
        "isDone": false,
        "isCorrect": false,
        "title": "Largest Property Value ",
        "description": "Create a function called getLargestPropertyValue that takes in an object. Return the value of the property with the largest value. If the object is empty, the function should return null.",
        "code": "function getLargestPropertyValue(obj) {[---editable---\n  \n  \n  ---editable---]\n}[---hidden--- return getLargestPropertyValue; ---hidden---]",
        "testsCode": "test.describe('Get Largest Property Value', () => {\n  test.it('should return the value of the property with the largest value', () => {\n    const response = __challengeFunction({\n      age: 30,\n      height: 180,\n      weight: 80\n    });\n    test.expect(response).toBe(180);\n  });\n  test.it('should return the value of the property with the largest value', () => {\n    const response = __challengeFunction({\n      age: 30,\n      height: 180,\n      weight: 80,\n      score: 1000\n    });\n    test.expect(response).toBe(1000);\n  });\n  test.it('should return null if the object is empty', () => {\n    const response = __challengeFunction({});\n    test.expect(response).toBe(null);\n  });\n});",
        "answer": "function getLargestPropertyValue(obj) {    if (Object.keys(obj).length === 0) return null;\n  let maxValue = -Infinity;\n  let maxProp;\n  for (const prop in obj) {\n    if (obj[prop] > maxValue) {\n      maxValue = obj[prop];\n      maxProp = prop;\n    }\n  }\n  return obj[maxProp];}"
    },
    {
        "id": "1671646068140",
        "isDone": false,
        "isCorrect": false,
        "title": "Longest Property Name ",
        "description": "Create a function called getLongestPropertyName that takes in an object. Return the name of the property with the longest name. If the object is empty, the function should return null.",
        "code": "function getLongestPropertyName(obj) {[---editable---\n  \n  \n  ---editable---]\n}[---hidden--- return getLongestPropertyName; ---hidden---]",
        "testsCode": "test.describe('Get Longest Property Name', () => {\n  test.it('should return the name of the property with the longest name', () => {\n    const response = __challengeFunction({\n      name: 'John',\n      age: 30,\n      height: 180,\n    });\n    test.expect(response).toBe('height');\n  });\n  test.it('should return the name of the property with the longest name', () => {\n    const response = __challengeFunction({\n      name: 'John',\n      age: 30,\n      height: 180,\n      favoriteColor: 'blue'\n    });\n    test.expect(response).toBe('favoriteColor');\n  });\n  test.it('should return null if the object is empty', () => {\n    const response = __challengeFunction({});\n    test.expect(response).toBe(null);\n  });\n});",
        "answer": "function getLongestPropertyName(obj) {  if (Object.keys(obj).length === 0) return null;\n  let maxLength = -Infinity;\n  let maxProp;\n  for (const prop in obj) {\n    if (prop.length > maxLength) {\n      maxLength = prop.length;\n      maxProp = prop;\n    }\n  }\n  return maxProp;}"
    }
]
